package main

import (
	"fmt"
	"strings"
)

// https://projecteuler.net/problem=8
//
// The four adjacent digits in the 1000-digit number that have the greatest
// product are 9 × 9 × 8 × 9 = 5832.
//
//73167176531330624919225119674426574742355349194934
// ...
//71636269561882670428252483600823257530420752963450
//
// Find the thirteen adjacent digits in the 1000-digit number that have
// the greatest product. What is the value of this product?

func numAsString() string {

	// save s to string
	s :=
		`73167176531330624919225119674426574742355349194934
 		96983520312774506326239578318016984801869478851843
 		85861560789112949495459501737958331952853208805511
 		12540698747158523863050715693290963295227443043557
 		66896648950445244523161731856403098711121722383113
 		62229893423380308135336276614282806444486645238749
 		30358907296290491560440772390713810515859307960866
 		70172427121883998797908792274921901699720888093776
 		65727333001053367881220235421809751254540594752243
 		52584907711670556013604839586446706324415722155397
 		53697817977846174064955149290862569321978468622482
 		83972241375657056057490261407972968652414535100474
 		82166370484403199890008895243450658541227588666881
 		16427171479924442928230863465674813919123162824586
 		17866458359124566529476545682848912883142607690042
 		24219022671055626321111109370544217506941658960408
 		07198403850962455444362981230987879927244284909188
 		84580156166097919133875499200524063689912560717606
 		05886116467109405077541002256983155200055935729725
 		71636269561882670428252483600823257530420752963450`

	// remove newlines, tabs, and whitespace
	s = strings.Replace(s, "\n", "", -1)
	s = strings.Replace(s, "\t", "", -1)
	s = strings.Replace(s, " ", "", -1)
	return s
}

func main() {

	num := make(chan string)
	go func() { num <- numAsString }()
	arr := strings.Split(num, "")
	fmt.Println(arr)
	fmt.Println(len(arr))

	// stores the highest product
	// value overwritten when we encounter a new highest product
	// product := 0

	// stores the highest index of array we are inspecting
	// increments until value greater than 1000 (end of array)
	// idx := 3

	// stores array of nums in series that generated highest product
	// all elements overwritten when we encounter a new highest product
	// var series := make([]int, 4)
	// series[0] = 7
	// series[1] = 3
	// series[2] = 1
	// series[3] = 6
}
